[
  {
    "id": "TC001",
    "title": "CSV File Upload Success",
    "description": "Verify CSV file can be uploaded successfully and triggers ETL processing with transformation logs.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to the data ingestion upload page."
      },
      {
        "type": "action",
        "description": "Upload a valid CSV file with typical tabular data."
      },
      {
        "type": "assertion",
        "description": "Check that upload completes without errors."
      },
      {
        "type": "assertion",
        "description": "Verify ETL processing starts automatically."
      },
      {
        "type": "assertion",
        "description": "Confirm transformation logs are generated and stored."
      },
      {
        "type": "assertion",
        "description": "Confirm uploaded data appears in the dashboard data quality metrics."
      }
    ]
  },
  {
    "id": "TC002",
    "title": "CSV File Upload with Malformed CSV",
    "description": "Check system behavior when uploading a malformed or corrupted CSV file.",
    "category": "error handling",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to data ingestion upload page."
      },
      {
        "type": "action",
        "description": "Upload a corrupted or malformed CSV file."
      },
      {
        "type": "assertion",
        "description": "Verify upload is rejected with a clear error message."
      },
      {
        "type": "assertion",
        "description": "Ensure no ETL processing or data ingestion is triggered."
      }
    ]
  },
  {
    "id": "TC003",
    "title": "API Data Source Connection Success",
    "description": "Validate successful connection and ingestion from an external API data source.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Configure API connection with valid API endpoint and credentials."
      },
      {
        "type": "action",
        "description": "Trigger initial data ingestion from API."
      },
      {
        "type": "assertion",
        "description": "Confirm data is retrieved successfully."
      },
      {
        "type": "assertion",
        "description": "Confirm ETL processing is applied with transformation logs."
      },
      {
        "type": "assertion",
        "description": "Validate updated data appears in the dashboard data quality metrics."
      }
    ]
  },
  {
    "id": "TC004",
    "title": "Data Quality Check - Missing Values Detection",
    "description": "Verify system detects missing values in ingested data and reports correctly on dashboard.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Ingest a dataset containing deliberate missing values in some columns."
      },
      {
        "type": "assertion",
        "description": "Check data quality monitoring identifies missing values per column."
      },
      {
        "type": "assertion",
        "description": "Confirm missing values are reflected on the data health scorecard and trend charts."
      }
    ]
  },
  {
    "id": "TC005",
    "title": "Data Quality Check - Duplicate Records Detection",
    "description": "Ensure system detects and reports duplicate records in ingested data.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Ingest dataset with known duplicate rows."
      },
      {
        "type": "assertion",
        "description": "Verify duplicate records detection flags duplicates correctly."
      },
      {
        "type": "assertion",
        "description": "Confirm duplicates count appears in dashboard metrics."
      }
    ]
  },
  {
    "id": "TC006",
    "title": "Data Quality Check - Schema Drift Detection",
    "description": "Validate detection of schema drift such as added, removed, or renamed columns.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Ingest initial dataset with base schema."
      },
      {
        "type": "action",
        "description": "Ingest subsequent dataset with an intentional schema change (e.g., missing or added column)."
      },
      {
        "type": "assertion",
        "description": "Verify schema drift is detected and flagged in dashboard alerts."
      },
      {
        "type": "assertion",
        "description": "Ensure schema changes are logged with detected differences."
      }
    ]
  },
  {
    "id": "TC007",
    "title": "Data Quality Check - Data Type Mismatch Detection",
    "description": "Confirm system identifies and reports data type mismatches in ingested data.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Ingest dataset with columns containing data type violations (e.g., string in numeric field)."
      },
      {
        "type": "assertion",
        "description": "Check data type mismatches are detected for affected columns."
      },
      {
        "type": "assertion",
        "description": "Verify that mismatches are visible on quality dashboards and alerts."
      }
    ]
  },
  {
    "id": "TC008",
    "title": "Data Quality Check - Outlier Detection",
    "description": "Validate that system detects outliers based on defined statistical thresholds.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Ingest dataset containing known outliers."
      },
      {
        "type": "assertion",
        "description": "Verify outlier detection mechanism flags outliers correctly."
      },
      {
        "type": "assertion",
        "description": "Confirm outlier information is displayed in dashboard visualizations."
      }
    ]
  },
  {
    "id": "TC009",
    "title": "ML Model Deployment and Live Monitoring",
    "description": "Test deployment of a scikit-learn model and verify live inference metrics update in the dashboard.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Upload and deploy a valid scikit-learn model via the model monitoring interface."
      },
      {
        "type": "action",
        "description": "Send inference requests with test data."
      },
      {
        "type": "assertion",
        "description": "Confirm live inference metrics (accuracy, F1 score) update correctly on the dashboard."
      },
      {
        "type": "assertion",
        "description": "Verify feature and prediction distribution visualizations display properly."
      }
    ]
  },
  {
    "id": "TC010",
    "title": "ML Model Drift Detection Accuracy",
    "description": "Ensure the system accurately identifies feature and prediction distribution shifts using Evidently AI.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Deploy a model and feed baseline data to establish initial distributions."
      },
      {
        "type": "action",
        "description": "Inject data with simulated drift in feature distribution."
      },
      {
        "type": "assertion",
        "description": "Verify drift detection triggers for affected features."
      },
      {
        "type": "assertion",
        "description": "Check that alerts are generated and displayed in the dashboard."
      }
    ]
  },
  {
    "id": "TC011",
    "title": "Multi-channel Alert - Email and In-app Notification Delivery",
    "description": "Validate multi-channel alerts trigger and are delivered to users as configured upon data quality failure or model drift.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Configure alert thresholds and email settings in settings interface."
      },
      {
        "type": "action",
        "description": "Trigger a data quality failure or model drift event."
      },
      {
        "type": "assertion",
        "description": "Verify email alert is received by configured recipients."
      },
      {
        "type": "assertion",
        "description": "Confirm in-app dashboard notification is displayed promptly."
      }
    ]
  },
  {
    "id": "TC012",
    "title": "Dashboard Performance and Responsiveness",
    "description": "Test the dashboard loads real-time key metrics, charts, and historical logs within performance criteria and is responsive across devices.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to the dashboard page with active monitoring data."
      },
      {
        "type": "assertion",
        "description": "Confirm dashboard loads within 5 seconds."
      },
      {
        "type": "assertion",
        "description": "Verify all charts and metric cards display correctly and update in real-time."
      },
      {
        "type": "action",
        "description": "Resize browser and access dashboard on different devices."
      },
      {
        "type": "assertion",
        "description": "Check dashboard remains usable and layouts adapt appropriately."
      }
    ]
  },
  {
    "id": "TC013",
    "title": "Authentication Enforcement and Security",
    "description": "Verify that system authentication restricts access to authorized users and protects data privacy.",
    "category": "security",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Attempt to access backend API endpoints and frontend pages without authentication."
      },
      {
        "type": "assertion",
        "description": "Ensure access is denied and user is redirected to login."
      },
      {
        "type": "action",
        "description": "Login with valid credentials."
      },
      {
        "type": "assertion",
        "description": "Verify authorized access to all permitted features."
      },
      {
        "type": "action",
        "description": "Attempt SQL injection or other common attacks via input fields."
      },
      {
        "type": "assertion",
        "description": "Confirm inputs are sanitized and attacks are prevented."
      }
    ]
  },
  {
    "id": "TC014",
    "title": "Settings Management Interface Functionality",
    "description": "Confirm users can configure email alerts, thresholds, and system parameters through settings UI and changes persist.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to settings management page."
      },
      {
        "type": "action",
        "description": "Modify email notification recipients and alert thresholds."
      },
      {
        "type": "action",
        "description": "Save the changes."
      },
      {
        "type": "assertion",
        "description": "Confirm updated settings are persisted and applied."
      },
      {
        "type": "action",
        "description": "Trigger an alert event to verify new settings take effect."
      },
      {
        "type": "assertion",
        "description": "Check alerts follow the updated parameters."
      }
    ]
  },
  {
    "id": "TC015",
    "title": "Docker Compose Multi-service Deployment Validation",
    "description": "Validate that backend, frontend, ML pipeline, and PostgreSQL services deploy correctly with Docker Compose and communicate as expected.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Run docker-compose up with multi-service setup."
      },
      {
        "type": "assertion",
        "description": "Verify all services start without errors."
      },
      {
        "type": "assertion",
        "description": "Confirm backend API endpoints are reachable from frontend container."
      },
      {
        "type": "assertion",
        "description": "Validate ML pipeline service connects properly to backend and database."
      },
      {
        "type": "assertion",
        "description": "Check database service is accessible and initialized with correct schema."
      }
    ]
  },
  {
    "id": "TC016",
    "title": "Dashboard Drill-down Navigation and Logs Exploration",
    "description": "Test users can interact with dashboard alerts and charts to drill down into detailed logs and historical data.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Trigger data quality or model alerts."
      },
      {
        "type": "action",
        "description": "Click alert notifications on the dashboard."
      },
      {
        "type": "assertion",
        "description": "Verify navigation to detailed log pages or charts."
      },
      {
        "type": "action",
        "description": "Use interactive charts to view trend history and metrics at different time resolutions."
      },
      {
        "type": "assertion",
        "description": "Ensure data visualizations update and filter properly."
      }
    ]
  },
  {
    "id": "TC017",
    "title": "Handle Large File Uploads and Scalability",
    "description": "Verify system can handle large CSV file uploads gracefully with proper progress indication and no crashes.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Attempt to upload a large CSV file near upper size limits."
      },
      {
        "type": "assertion",
        "description": "Check upload progress is visible to the user."
      },
      {
        "type": "assertion",
        "description": "Confirm file uploads successfully without timeout or failure."
      },
      {
        "type": "assertion",
        "description": "Validate that ETL processing and data quality checks complete for large data."
      }
    ]
  },
  {
    "id": "TC018",
    "title": "API Endpoint Validation and Error Handling",
    "description": "Test that all API endpoints properly validate inputs and return appropriate error responses for invalid requests.",
    "category": "error handling",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Send malformed or incomplete payloads to each backend REST API endpoint."
      },
      {
        "type": "assertion",
        "description": "Verify 4xx error codes returned with meaningful error messages."
      },
      {
        "type": "action",
        "description": "Attempt unauthorized access to restricted endpoints."
      },
      {
        "type": "assertion",
        "description": "Check for 401/403 error responses."
      }
    ]
  },
  {
    "id": "TC019",
    "title": "Real-time Data Quality Metrics Update",
    "description": "Verify that data quality metrics on dashboard update in real-time or near-real-time after ingestion events.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Ingest new tabular data triggering a data quality check."
      },
      {
        "type": "assertion",
        "description": "Observe the dashboard refresh and display updated metrics within 5 seconds."
      },
      {
        "type": "assertion",
        "description": "Confirm historical data quality trends are updated accordingly."
      }
    ]
  },
  {
    "id": "TC020",
    "title": "Model Inference Handling with Invalid Data",
    "description": "Check system behavior when ML inference is requested with data that does not conform to model expectations.",
    "category": "error handling",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Deploy a model and send inference requests with input data violating expected schema or types."
      },
      {
        "type": "assertion",
        "description": "Ensure system rejects invalid inference request gracefully with error message."
      },
      {
        "type": "assertion",
        "description": "Verify no incorrect metrics or crashes occur."
      }
    ]
  }
]
