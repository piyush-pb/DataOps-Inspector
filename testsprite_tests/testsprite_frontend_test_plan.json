[
  {
    "id": "TC001",
    "title": "Successful CSV Data Upload and ETL Processing",
    "description": "Verify that a user can upload a valid CSV file and initiate ETL processing successfully with transformation logging.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to the data source upload interface."
      },
      {
        "type": "action",
        "description": "Upload a well-formatted CSV file containing tabular data."
      },
      {
        "type": "action",
        "description": "Initiate the ETL process for the uploaded CSV data."
      },
      {
        "type": "assertion",
        "description": "Verify ETL process completes without errors."
      },
      {
        "type": "assertion",
        "description": "Check transformation logs are accurately recorded in the system logs."
      },
      {
        "type": "assertion",
        "description": "Ensure the data quality checks start running and results are stored in the database."
      }
    ]
  },
  {
    "id": "TC002",
    "title": "CSV Upload with Missing Values and Data Type Mismatches",
    "description": "Test system behavior when CSV data contains missing values and incorrect data types during upload and ETL processing.",
    "category": "error handling",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Upload a CSV file with some missing values and data type mismatches."
      },
      {
        "type": "action",
        "description": "Start ETL processing on the file."
      },
      {
        "type": "assertion",
        "description": "Confirm that missing values and data type mismatches are detected and logged as data quality issues."
      },
      {
        "type": "assertion",
        "description": "Check that data quality score reflects the presence of errors appropriately."
      },
      {
        "type": "assertion",
        "description": "Verify that alerts are generated for critical missing data or type mismatches."
      }
    ]
  },
  {
    "id": "TC003",
    "title": "API Data Source Connection and Data Ingestion",
    "description": "Validate connection to a public API data source and ingestion into the platform with proper logging and transformation tracking.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Access the data source configuration interface."
      },
      {
        "type": "action",
        "description": "Configure connection parameters for a supported public API."
      },
      {
        "type": "action",
        "description": "Trigger data ingestion via the API."
      },
      {
        "type": "assertion",
        "description": "Verify data is ingested successfully into the system."
      },
      {
        "type": "assertion",
        "description": "Ensure transformation logs capture details of API data processing."
      }
    ]
  },
  {
    "id": "TC004",
    "title": "Real-time Data Quality Metrics Display on Dashboard",
    "description": "Check that the dashboard displays updated data quality metrics, health scorecards, and trend charts in real time after data processing.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Upload or connect to a data source and initiate ETL processing."
      },
      {
        "type": "action",
        "description": "Navigate to the dashboard page."
      },
      {
        "type": "assertion",
        "description": "Ensure data quality metrics are displayed with correct values."
      },
      {
        "type": "assertion",
        "description": "Verify health scorecards update dynamically."
      },
      {
        "type": "assertion",
        "description": "Check that trend charts show historical data trends correctly."
      }
    ]
  },
  {
    "id": "TC005",
    "title": "ML Model Deployment and Live Inference Monitoring",
    "description": "Verify ML engineers can deploy a sample model and the dashboard correctly displays live inference metrics and drift detection.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Deploy a sample ML model using the model monitoring interface."
      },
      {
        "type": "action",
        "description": "Start live inference processing with sample input data."
      },
      {
        "type": "action",
        "description": "Navigate to the model monitoring dashboard."
      },
      {
        "type": "assertion",
        "description": "Verify live accuracy, F1 score, and drift metrics are displayed and updated in real time."
      },
      {
        "type": "assertion",
        "description": "Confirm that Evidently AI-based drift detection alerts are triggered if drift is detected."
      }
    ]
  },
  {
    "id": "TC006",
    "title": "Alert System - Email and In-App Notifications for Data Quality Failures",
    "description": "Check that the alert system generates timely email and in-app notifications when critical data quality issues or model performance drops occur.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Simulate a data quality failure or model performance drop event."
      },
      {
        "type": "assertion",
        "description": "Verify an alert is generated and logged in the system."
      },
      {
        "type": "assertion",
        "description": "Check that the user receives the alert via in-app notification."
      },
      {
        "type": "assertion",
        "description": "Confirm the alert email is sent to registered users promptly."
      },
      {
        "type": "assertion",
        "description": "Ensure alerts trigger within 60 seconds of the issue occurrence."
      }
    ]
  },
  {
    "id": "TC007",
    "title": "Dashboard Load Performance",
    "description": "Ensure dashboard key metrics and components load completely within 5 seconds for a smooth user experience.",
    "category": "performance",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to the main dashboard."
      },
      {
        "type": "assertion",
        "description": "Measure time taken for all key metrics, scorecards, and charts to fully render."
      },
      {
        "type": "assertion",
        "description": "Verify the load time does not exceed 5 seconds under normal network conditions."
      }
    ]
  },
  {
    "id": "TC008",
    "title": "Schema Drift Detection and Alerting",
    "description": "Validate that schema drift in data sources is detected correctly and corresponding alerts are generated.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Alter the data source schema by adding, removing, or changing column data types."
      },
      {
        "type": "action",
        "description": "Trigger data ingestion and subsequent quality checks."
      },
      {
        "type": "assertion",
        "description": "Confirm that schema drift is identified and logged."
      },
      {
        "type": "assertion",
        "description": "Check that an alert is generated and sent via email and in-app notification."
      }
    ]
  },
  {
    "id": "TC009",
    "title": "Authentication Enabled - Access Restriction and Security",
    "description": "Verify that enabling basic authentication restricts dashboard and data access to authorized users only.",
    "category": "security",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Enable basic authentication in application settings."
      },
      {
        "type": "action",
        "description": "Attempt to access the dashboard without credentials."
      },
      {
        "type": "assertion",
        "description": "Verify access is denied and login prompt is shown."
      },
      {
        "type": "action",
        "description": "Log in with valid credentials."
      },
      {
        "type": "assertion",
        "description": "Confirm successful access to dashboard and authorized data."
      },
      {
        "type": "action",
        "description": "Try to access API endpoints without authentication."
      },
      {
        "type": "assertion",
        "description": "Verify API access is denied."
      }
    ]
  },
  {
    "id": "TC010",
    "title": "Data Transformation and Metrics Logging Accuracy",
    "description": "Check that all data transformations performed during ETL and model inference are accurately logged and metrics stored properly in the database.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Upload data and initiate ETL process."
      },
      {
        "type": "action",
        "description": "Deploy and run ML model inference."
      },
      {
        "type": "assertion",
        "description": "Verify transformation logs match the expected processing operations."
      },
      {
        "type": "assertion",
        "description": "Check that data quality metrics and model performance metrics are correctly recorded in PostgreSQL."
      }
    ]
  },
  {
    "id": "TC011",
    "title": "User Settings Management Interface Functionality",
    "description": "Validate users can view, update, and save application settings successfully through the settings management interface.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to the settings page on the dashboard."
      },
      {
        "type": "action",
        "description": "Modify available configuration settings such as alert preferences or authentication settings."
      },
      {
        "type": "action",
        "description": "Save the changes."
      },
      {
        "type": "assertion",
        "description": "Verify that settings are persisted and applied correctly."
      }
    ]
  },
  {
    "id": "TC012",
    "title": "System Resilience - Handling Corrupt or Invalid CSV Upload",
    "description": "Test system behavior when uploading a corrupt or invalid CSV file to ensure graceful error handling and user notification.",
    "category": "error handling",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Attempt to upload a corrupted or malformed CSV file."
      },
      {
        "type": "assertion",
        "description": "Verify the system rejects the file upload."
      },
      {
        "type": "assertion",
        "description": "Confirm an informative error message is displayed to the user."
      },
      {
        "type": "assertion",
        "description": "Ensure no partial or invalid data is processed or stored."
      }
    ]
  },
  {
    "id": "TC013",
    "title": "Recent Activity Feed Updates",
    "description": "Verify recent activity feed displays system events such as data quality checks, model deployments, and alerts correctly and updates in real time.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Perform data upload, ETL, and model deployment actions."
      },
      {
        "type": "action",
        "description": "Navigate to the recent activity feed component."
      },
      {
        "type": "assertion",
        "description": "Verify all recent system events are shown with correct timestamps and descriptions."
      },
      {
        "type": "assertion",
        "description": "Check that new events appear in the feed without page refresh."
      }
    ]
  },
  {
    "id": "TC014",
    "title": "Containerized Deployment Process Verification",
    "description": "Test that the application can be deployed and run successfully using Docker Compose with proper environment configuration.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Pull the repository and review deployment documentation."
      },
      {
        "type": "action",
        "description": "Run the application stack using Docker Compose with sample environment configurations."
      },
      {
        "type": "assertion",
        "description": "Ensure all services start without errors."
      },
      {
        "type": "assertion",
        "description": "Confirm that frontend and backend components are accessible and functional."
      }
    ]
  },
  {
    "id": "TC015",
    "title": "Error Boundary and Loading State Handling",
    "description": "Verify that the application gracefully handles errors and shows loading states appropriately for API calls and page rendering.",
    "category": "error handling",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Simulate backend API failure or slow responses."
      },
      {
        "type": "action",
        "description": "Navigate through different pages such as Dashboard, Data Quality, and Model Monitoring."
      },
      {
        "type": "assertion",
        "description": "Confirm loading spinners appear during data fetch delays."
      },
      {
        "type": "assertion",
        "description": "Check that error boundary components display user-friendly messages upon failures."
      }
    ]
  },
  {
    "id": "TC016",
    "title": "Outlier Detection in Data Quality Checks",
    "description": "Validate that the system detects statistical outliers in ingested data and reflects the findings on the dashboard.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Upload a dataset containing known outlier data points."
      },
      {
        "type": "action",
        "description": "Begin ETL processing and data quality analysis."
      },
      {
        "type": "assertion",
        "description": "Verify outliers are flagged and reported in data quality metrics."
      },
      {
        "type": "assertion",
        "description": "Check outlier presence is reflected in scorecards and trend charts."
      }
    ]
  }
]
